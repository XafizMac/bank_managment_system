import { NextRequest, NextResponse } from 'next/server';
import { useStore } from './store/store';

export function middleware(request: NextRequest) {
    const userId = request.cookies.get('userId')?.value;
    const userRole = request.cookies.get('userRole')?.value;

    const isAuthenticated = useStore.getState().isAuthenticated
    const validRoles = ['admin', 'employee', 'approver', 'archivist'];

    // üîê –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –∑–∞—Ö–æ–¥–∏—Ç –Ω–∞ /login ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º
    if (request.nextUrl.pathname === '/login' && (userId && userRole) && validRoles.includes(userRole)) {
        return NextResponse.redirect(new URL('/', request.url)); // –∏–ª–∏ –¥—Ä—É–≥–∞—è –≥–ª–∞–≤–Ω–∞—è
    }

    // üîê –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω
    if (!userId || !userRole) {
        // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ /login –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
        if (request.nextUrl.pathname === '/login') {
            return NextResponse.next();
        }
        return NextResponse.redirect(new URL('/login', request.url));
    }

    if (request.nextUrl.pathname.startsWith('/') && !isAuthenticated) {
        return NextResponse.redirect(new URL('/login', request.url));
    }

    // ‚ùå –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    if (!validRoles.includes(userRole)) {
        return NextResponse.redirect(new URL('/', request.url));
    }

    // üîê –¢–æ–ª—å–∫–æ admin –º–æ–∂–µ—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ /admin
    if (request.nextUrl.pathname.startsWith('/admin') && userRole !== 'admin') {
        return NextResponse.redirect(new URL('/unauthorized', request.url));
    }

    return NextResponse.next();
}

export const config = {
    matcher: [
        '/login',
        '/admin/:path*',
        '/employee/:path*',
        '/approver/:path*',
        '/archivist/:path*',
        '/dashboard/:path*',
    ],
};
